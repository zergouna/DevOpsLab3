---
- name: Automatisation de l'infrastructure Kubernetes avec Kind
  hosts: localhost
  become: yes
  vars:
    project_dir: "/home/zergouna/Téléchargements/DevOpsLab3-main"  # Chemin absolu de votre projet
    kubeconfig_path: "/root/.kube/kind-config-modern-infra"  # Chemin explicite pour KUBECONFIG
  tasks:
    - name: Installer les prérequis (Docker, Kind, kubectl)
      ansible.builtin.apt:
        name:
          - docker.io
          - curl
        state: present
        update_cache: yes

    - name: Télécharger et installer Kind
      ansible.builtin.get_url:
        url: https://kind.sigs.k8s.io/dl/v0.23.0/kind-linux-arm64
        dest: /usr/local/bin/kind
        mode: '0755'

    - name: Télécharger et installer kubectl
      ansible.builtin.get_url:
        url: https://storage.googleapis.com/kubernetes-release/release/v1.28.0/bin/linux/arm64/kubectl
        dest: /usr/local/bin/kubectl
        mode: '0755'

    - name: Télécharger Helm
      ansible.builtin.get_url:
        url: https://get.helm.sh/helm-v3.15.4-linux-arm64.tar.gz
        dest: /tmp/helm.tar.gz
        mode: '0644'
      register: helm_download

    - name: Extraire Helm
      ansible.builtin.unarchive:
        src: /tmp/helm.tar.gz
        dest: /tmp
        remote_src: yes
      when: helm_download.changed

    - name: Installer Helm
      ansible.builtin.copy:
        src: /tmp/linux-arm64/helm
        dest: /usr/local/bin/helm
        mode: '0755'
        owner: root
        group: root
      when: helm_download.changed

    - name: Vérifier l'installation de Helm
      ansible.builtin.command: /usr/local/bin/helm version
      changed_when: false
      register: helm_version
      failed_when: helm_version.rc != 0

    - name: Ajouter les dépôts Helm
      ansible.builtin.command: "{{ item }}"
      loop:
        - /usr/local/bin/helm repo add traefik https://helm.traefik.io/traefik
        - /usr/local/bin/helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        - /usr/local/bin/helm repo add argo https://argoproj.github.io/argo-helm
        - /usr/local/bin/helm repo update
      changed_when: false
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin"

    - name: Vérifier l'existence du fichier kind-config.yaml
      ansible.builtin.stat:
        path: "{{ project_dir }}/kubernetes/kind-config.yaml"
      register: kind_config
      failed_when: not kind_config.stat.exists

    - name: Créer un cluster Kind
      ansible.builtin.command: kind create cluster --name modern-infra --config "{{ project_dir }}/kubernetes/kind-config.yaml" --kubeconfig "{{ kubeconfig_path }}"
      args:
        creates: "{{ kubeconfig_path }}"
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin"

    - name: Vérifier l'existence du fichier KUBECONFIG
      ansible.builtin.stat:
        path: "{{ kubeconfig_path }}"
      register: kubeconfig_file
      failed_when: not kubeconfig_file.stat.exists

    - name: Vérifier l'accès au cluster Kubernetes
      ansible.builtin.command: kubectl cluster-info
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      changed_when: false
      register: cluster_info
      failed_when: cluster_info.rc != 0

    - name: Déployer Traefik via Helm
      ansible.builtin.command: /usr/local/bin/helm install traefik traefik/traefik --namespace traefik --create-namespace --values "{{ project_dir }}/helm/traefik-values.yaml"
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Déployer Whoami
      ansible.builtin.command: kubectl apply -f "{{ project_dir }}/kubernetes/manifests/whoami-deployment.yaml"
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Déployer Prometheus et Grafana via Helm
      ansible.builtin.command: /usr/local/bin/helm install kube-prometheus-stack prometheus-community/kube-prometheus-stack --namespace monitoring --create-namespace --values "{{ project_dir }}/helm/prometheus-values.yaml"
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Déployer ArgoCD via Helm
      ansible.builtin.command: /usr/local/bin/helm install argocd argo/argo-cd --namespace argocd --create-namespace --values "{{ project_dir }}/helm/argocd-values.yaml"
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Déployer l'application ArgoCD pour synchroniser le dépôt Git
      ansible.builtin.command: kubectl apply -f "{{ project_dir }}/kubernetes/manifests/argocd-app.yaml"
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
